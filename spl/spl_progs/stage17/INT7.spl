//print "INT7 called";
// mode flag of the process is updated
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;


alias userSP R0;
userSP = SP;

// Storing current SP value to process table and change user stack to kernal stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]* 16) + 11] * 512 - 1;


// Getting the file fileDescriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];


// Checking whether fileDescriptor  = -2 (for write)
if (fileDescriptor != -2) then
     alias physicalAddrRetVal R5;
     physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
     [physicalAddrRetVal] = -1;
else
        // Checking or requesting terminal to print
        multipush(R0,R1,R2,R3,R4);
        alias terminal_no R1;
        terminal_no = 3;
        alias pid_no R2;
        pid_no =[SYSTEM_STATUS_TABLE +1];
        alias word R3;
        word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

        call MOD_4;

        multipop(R0,R1,R2,R3,R4);
endif;



alias physicalAddrRetVal R6;
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
[physicalAddrRetVal] = 0;

SP = userSP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;