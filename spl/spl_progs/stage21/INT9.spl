// INTERRUPT 9
//print "INT 9";
alias current_pid R0;
alias userSP R1;
current_pid = [SYSTEM_STATUS_TABLE+1];
// mode flag
[PROCESS_TABLE + current_pid*16 +9]=9;

// saving user stack value
[PROCESS_TABLE + current_pid*16 +13]=SP;

userSP=SP;
SP=[PROCESS_TABLE + current_pid*16 +11]*512 -1;

// getting filename
alias filename R2;
alias physicaladdr R3;
alias page_number R4;
alias offset R5;

page_number=[PTBR + 2*((userSP-4)/512)];
offset=(userSP-4)%512;
physicaladdr=page_number*512 + offset;
filename=[physicaladdr];

alias index R3;
alias inode_table_entry R4;
alias found R5;


index = 0;
found = 0;

while(index < MAX_FILE_NUM) do
	inode_table_entry = INODE_TABLE + (index * 16);
	if([inode_table_entry + 1] == filename && [inode_table_entry] == EXEC) then
		found = 1;
		break;
	endif;
	index = index + 1;
endwhile;

// filename is not found just return to user mode
if(found == 0) then
    alias physicaladdr R3;
    alias page_number R4;
    alias offset R5;
	page_number=[PTBR + 2*(userSP-1)];
    offset=(userSP - 1)%512;
    physicaladdr=page_number*512+offset;
    [physicaladdr]=-1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
	ireturn;
endif;

// If file is found
// calling exit fucntion in process manager module
backup;
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
restore;

alias user_area R6;
user_area = [PROCESS_TABLE + current_pid*16 + 11];

// Incrementing MEMORY_FREE_LIST of user page number
[MEMORY_FREE_LIST +user_area]=1;

// Decrementing MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

// Setting up the kernal for new process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11] * 512 - 1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 4] = RUNNING;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 7] = index;

// PER PROCESS RESOURCE TABLE

alias iter R8;
iter = 0;
while(iter < 16) do
	[(([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11] + 1) * 512 ) - 16 + iter] = -1;
	iter = iter + 1;
endwhile;

// Allocating new pages in corresponding PTBR
alias ptbr R6;
ptbr = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 14];
//library
[ptbr+0] = 63;
[ptbr+1] = "0100";
[ptbr+2] = 64;
[ptbr+3] = "0100";

//heap - Not allocating for heap

//Stack

backup;
R1 = 1;
call MOD_2;
[ptbr+16] = R0;
[ptbr+17] = "0110";
restore;

backup;
R1 = 1;
call MOD_2;
[ptbr+18] = R0;
[ptbr+19] = "0110";
restore;

// Code pages
if([INODE_TABLE + (index*16) + 8] != - 1) then
	backup;
	R1 = 5;
	R2 = [INODE_TABLE + (index*16) + 8];
    // Get Code Page
	call MOD_2;
	[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 14]+ 8] = R0;
	[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 14]+ 9] = "0100";
	restore;
else
	[ptbr+ 8] = -1;
	[ptbr+ 9] = "0000";
endif;

//invalidating the other 3 code pages
[ptbr + 10] = -1;
[ptbr + 11] = "0000";
[ptbr + 12] = -1;
[ptbr + 13] = "0000";
[ptbr + 14] = -1;
[ptbr + 15] = "0000";

// Storing entry point to top of the stack
[[ptbr +16]*512]=[[ptbr+8]*512+1];

// Updating the mode flag
//DISK MAP TABLE
alias disk_map_table_entry R8;
disk_map_table_entry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;

[disk_map_table_entry + 0] = -1;
[disk_map_table_entry + 1] = -1;
[disk_map_table_entry + 2] = -1;
[disk_map_table_entry + 3] = -1;
[disk_map_table_entry + 4] = [INODE_TABLE + (index*16) + 8];
[disk_map_table_entry + 5] = [INODE_TABLE + (index*16) + 9];
[disk_map_table_entry + 6] = [INODE_TABLE + (index*16) + 10];
[disk_map_table_entry + 7] = [INODE_TABLE + (index*16) + 11];
[disk_map_table_entry + 8] = -1;
[disk_map_table_entry + 9] = -1;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
SP=8*512;
ireturn;
