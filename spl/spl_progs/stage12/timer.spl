
// Storing SP to current process's PT
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
breakpoint;
// Saving the user context to kernal stack
backup;


// PID of currenlty executing program
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//Update the process table entry of current process
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY;

//print "PT updated 1";

// Changing the PID to toggle between new process
alias newPID R2;
if(currentPID == 0) then
    newPID = 1;
else
    newPID = 0;
endif;

//print "PID changed";

// Updating the register with new process values
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

//print "PT updated 2";

// if new porcess is never scheduled for execution
if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

//print "Schedulling";

restore;
//print "Restore";
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];

ireturn;