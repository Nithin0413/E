// Load the idle program
loadi(69,11);
loadi(70,12);

// Load the timer interrpt routine
loadi(4,17);
loadi(5,18);

// Load library code
loadi(63,13);
loadi(64,14);

// Load init program
loadi(65,7);
loadi(66,8);

// Load INT10 module
loadi(22,35);
loadi(23,36);

// Load the exception handler routine
loadi(2, 15);
loadi(3, 16);

// Load INT7 code
loadi(16,29);
loadi(17,30);


// IDLE PROGRAM
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

// Page table entry for idle program
//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// Process Table Entry for Idle Program
[PROCESS_TABLE +1] = 0;
[PROCESS_TABLE +4] = CREATED;
[PROCESS_TABLE +11] = 82; // User Area Page Number
[PROCESS_TABLE +13] = 8*512; // Logical Address of User stack
[PROCESS_TABLE +12] = 0; // Kernal stack pointer to 0
[PROCESS_TABLE +14] = PAGE_TABLE_BASE;
[PROCESS_TABLE +15] = PTLR;

// Entry point IP value for idle program stored to top of tthe stack
[81*512] = [69*512+1];


// INIT PROGRAM

PTBR = PAGE_TABLE_BASE +20;
PTLR = 10;

// Page Table entry for init Program

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// Process Table Entry for init Program

[PROCESS_TABLE +17] = 1; //PID
[PROCESS_TABLE +20] = RUNNING;
[PROCESS_TABLE + 27] = 80; // User Area Page Number
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = PTLR;

[SYSTEM_STATUS_TABLE + 1] = 1;

//  Entry point IP value for INIT program stored to top of the stack
[76*512] = [65*512 + 1];

SP = 8*512;
ireturn;